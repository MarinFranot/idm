module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to 
	
	pn: petrinet!PetriNet (name <- p.name)
	do {arcs<- Arc.allInstances();
	nodes<-Place.allInstances()->union(Transition.allInstances());
	}
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	
	from wd: SimplePDL!WorkDefinition
	
	to
		
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(
				name <- wd.name + '_ready',
				marking <- 1),
		p_started : PetriNet!place(name<-wd.name+'_started',marking<-0),
		
		p_finished : PetriNet!place(name<-wd.name+'_finished',marking<-0),
		
		p_running : PetriNet!place(name<-wd.name+'_running',marking<-0),
		
		t_starts : PetriNet!Transition (name<-wd.name + '_Starts'),
		
		t_finishes : PetriNet!Transition (name<-wd.name + '_Finishes'),
		
		a_r2s : PetriNet!Arc (source<-p_ready, target<-t_starts),--ready to starts
		
		a_s2sd : PetriNet!Arc (source<-t_starts, target<-p_started), -- starts to started
		
		a_s2ru : PetriNet!Arc (source<-t_starts, target<-p_running), --starts to running
		
		a_ru2f : PetriNet!Arc (source<-p_running, target<-t_finishes), --running to finishes
		
		a_f2fd : PetriNet!Arc (source<-t_finishes, target<-p_finished) --finishes to finished
		
}
		
rule WorkSequence2PetriNet {
	from ws:SimplePDL!WorkSequence
	to 
	
		
			a_s2s:PetriNet!Arc(
				name <- ws.predecessor.name + 'to' + ws.successor.name
				source <-
					(if (ws.kind=#S2S or ) then 
						this.resolveTemps(ws.predecessor, 'p_started')
					else this.resolveTemps(ws.predecessor, 'p_finished') endif),
				target <-
					thisModule.resolveTemps(ws.successor, if(ws.kind=#S2S)then't_starts'))),
		endif
		if(ws.kind = #S2F)	
			a_s2f:PetriNet!Arc(source<-this.resolveTemps(ws.predecessor, 'p_started'),
			(target<-thisModule.resolveTemps(ws.successor, 't_finishes'))),
		if(ws.kind = #F2S)	
			a_f2s:PetriNet!Arc(source<-this.resolveTemps(ws.predecessor, 'p_finished'),
			(target<-thisModule.resolveTemps(ws.successor, 't_starts'))),
			
		if(ws.kind = #F2F)	
			a_f2f:PetriNet!Arc(source<-this.resolveTemps(ws.predecessor, 'p_finished'),
			(target<-thisModule.resolveTemps(ws.successor, 't_finishes'))),
		
		
}
